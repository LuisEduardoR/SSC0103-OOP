import java.util.Calendar;

/**
 * Class that implements a random number generator.
 * @author Luis Eduardo Rozante - 10734794
 *
 */
public class Random {
	
	// Instance to the class.
	private static Random instance;
	
	/**
	 * Gets a reference to a static instance to this class.
	 * @return A reference to a static instance of this class.
	 */
	public static Random getInstance() {
		
		if(instance == null)
			instance = new Random();
			
		return instance;
		
	}
	
    // Initially stores the seed and then the following random generated numbers.
	private long xi;

    // Default parameters.
    private long a = 453816693;
    private long m = 843314861;
    private long p = 2147483648L;

    /**
     * Constructor for the class, receives the seed to be used.
     * @param seed The seed to be used.
     */
    public Random(int seed) {

        xi = seed;
        if(instance == null)
        	instance = this;
    }

    /**
     * Constructor for the class, uses Calendar.getInstance().getTimeInMillis() as seed.
     */
    public Random() {

        xi = Calendar.getInstance().getTimeInMillis() % p;
        if(instance == null)
        	instance = this;
        
    }

    /**
     * Sets the seed to a specified value.
     * @param seed The value to set the seed to.
     */
    public void setSeed(int seed) {

        xi = seed;

    }

    /**
     * Set the parameters to be used for the random number generator, default parameters are recommended.
     * A number in the sequence is generated by xi = (sum + (x(i-1) * mul)) % mod.
     * @param a
     * @param m
     * @param p
     */
    public void setParameters(long a, long m, long p) {

        this.a = a;
        this.m = m;
        this.p = p;

    }

    /**
     * Generates a random number between 0 and 1.
     * @return A random number between 0 and 1.
     */
    public double getRand() {

        getNextNumber(); // Gets the next number in the pseudo-random sequence.
        return (double)xi / (double)p; // Divides the number by p turning it into a number between 0 and 1.

    }

    /**
     * Generates a random number between 0 and Integer.MAX_VALUE.
     * @return A random number generated 0 (inclusive) and Integer.MAX_VALUE (exclusive).
     */
	public int getRandInt() {

    	int i = (int)(getRand() * (double)Integer.MAX_VALUE);
        return i;

    }
	
	/**
	 * Generates a random number between 0 and max.
	 * @param max The max value to generate (exclusive).
	 * @return A random number generated 0 (inclusive) and max (exclusive).
	 */
    public int getRandInt(int max) {

    	int i = (int)(getRand() * (double)max);
        return i;

    }
	
    /**
     * Generates a random number between min and max.
     * @param min The min value to generate (inclusive).
     * @param max The max value to generate (exclusive).
     * @return A random number generated between min (inclusive) and max (exclusive).
     * @throws IllegalArgumentException if max is less or equal to min.
     */
	public int getRandInt(int min, int max) throws IllegalArgumentException{

		if (max <= min)
			throw new IllegalArgumentException("Invalid parameters! 'max' must be greater than 'min'!");
		
    	int i = min + getRandInt(max - min);
        return i;

    }

	/**
	 * Gets the next random number.
	 */
    private void getNextNumber() {

        xi = (a + (m * xi)) % p;

    }

  	@Override
  	public String toString() {
  		
  		return "CRandom@" + xi;
  		
  	}
    
}
